package com.bangbang.pm.bangbang;
import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.util.Xml;
import android.widget.Toast;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import java.io.RandomAccessFile;
import java.io.File;

/**
 * Created by zhongcaoyuo on 2017/5/4.
 */

@Aspect
public class AspectJTest {
    private String TAG = "zhongchaoyang";
    private String filePath = "/sdcard/zhongcaoyuo/";
    private String fileName = "log.txt";

    @Pointcut("execution(* com.bangbang.pm.bangbang..*.*(..))&& !within(AspectJTest)")//切MainActivity下方法的调用
    public void testAspectExecu(AspectJAnnotation name) {
    }
	
    @Pointcut("execution(* com.bangbang.pm.bangbang..*.*(..))")//切包下方法的调用
    public void testAspect(AspectJAnnotation name) {
    }
    @Pointcut("cflow(testAspect())&& !within(AspectJTest)")
    public void TestAspectCflow(){
    }

    @Before("testAspectExecu(TestAspectJ)")
    public void testTestAspect(JoinPoint joinPoint) {
        //Toast.makeText((Context) joinPoint.getTarget(),"OK",Toast.LENGTH_SHORT).show();
        //Log.e("-----","------------------------------------------before execution");
        Log.e("Execu------", joinPoint.getSignature().getName());
        writeTxtToFile("Execu------"+joinPoint.toString()+"------"+joinPoint.getStaticPart().getSourceLocation().getLine(), filePath, fileName);
    }

    @Before("TestAspectCflow()")
    public void testTestAspectCflow(JoinPoint joinPoint2){
        Log.e("Cflow------", joinPoint2.toString()+"------"+joinPoint2.getStaticPart().getSourceLocation().getLine());
        writeTxtToFile("Cflow------"+joinPoint2.toString()+"------"+joinPoint2.getStaticPart().getSourceLocation().getLine(), filePath, fileName);
    }

    // 将字符串写入到文本文件中
    public void writeTxtToFile(String strcontent, String filePath, String fileName) {
        //生成文件夹之后，再生成文件，不然会出错
        makeFilePath(filePath, fileName);

        String strFilePath = filePath+fileName;
        // 每次写入时，都换行写
        String strContent = strcontent + "\r\n";
        try {
            File file = new File(strFilePath);
            if (!file.exists()) {
                Log.d("TestFile", "Create the file:" + strFilePath);
                file.getParentFile().mkdirs();
                file.createNewFile();
            }
            RandomAccessFile raf = new RandomAccessFile(file, "rwd");
            raf.seek(file.length());
            raf.write(strContent.getBytes());
            raf.close();
        } catch (Exception e) {
            Log.e("TestFile", "Error on write File:" + e);
        }
    }

    // 生成文件
    public File makeFilePath(String filePath, String fileName) {
        File file = null;
        makeRootDirectory(filePath);
        try {
            file = new File(filePath + fileName);
            if (!file.exists()) {
                file.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return file;
    }

    // 生成文件夹
    public static void makeRootDirectory(String filePath) {
        File file = null;
        try {
            file = new File(filePath);
            if (!file.exists()) {
                file.mkdir();
            }
        } catch (Exception e) {
            Log.i("error:", e + "");
        }
    }


}